// func getUsers(w http.ResponseWriter, r *http.Request) {
// 	// set header
// 	w.Header().Set("Content-Type", "application/json")

// 	//encode users into json
// 	json.NewEncoder(w).Encode(users)
// }

// func getUser(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "application/json")

// 	// get params
// 	params := mux.Vars(r)

// 	// loop thhru users, find with id
// 	// for _ + for item in users
// 	for _, item := range users {
// 		if item.ID == params["id"] {
// 			json.NewEncoder(w).Encode(item)
// 			return
// 		}
// 	}

// 	json.NewEncoder(w).Encode(&models.User{})

// }

// func createUser(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "application/json")
// 	var user models.User
// 	_ = json.NewDecoder(r.Body).Decode(&user)

// 	user.ID = strconv.Itoa(rand.Intn(1000000))

// 	users = append(users, user)
// 	json.NewEncoder(w).Encode(user)

// }

// // // combintation of delete + create
// func updateUser(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "application/json")

// 	// get params
// 	params := mux.Vars(r)

// 	for index, item := range users {
// 		if item.ID == params["id"] {
// 			// delete's slice
// 			users = append(users[:index], users[index+1:]...)

// 			// create's creation
// 			var user models.User
// 			_ = json.NewDecoder(r.Body).Decode(&user)

// 			user.ID = params["id"]
// 			users = append(users, user)
// 			json.NewEncoder(w).Encode(user)
// 			return
// 		}
// 	}
// 	json.NewEncoder(w).Encode(users)
// }

// func deleteUser(w http.ResponseWriter, r *http.Request) {
// 	w.Header().Set("Content-Type", "application/json")

// 	// get params
// 	params := mux.Vars(r)

// 	for index, item := range users {
// 		if item.ID == params["id"] {
// 			users = append(users[:index], users[index+1:]...)
// 			break
// 		}
// 	}
// 	json.NewEncoder(w).Encode(users)
// }

//inside main
// user route handlers / endpoints
// router.HandleFunc("/api/users", getUsers).Methods("GET")
// router.HandleFunc("/api/user/{id}", getUser).Methods("GET")
// router.HandleFunc("/api/user", createUser).Methods("POST")
// router.HandleFunc("/api/user/{id}", updateUser).Methods("PUT")
// router.HandleFunc("/api/user/{id}", deleteUser).Methods("DELETE")